buildscript {
//    repositories {
//        jcenter()
//    }
    dependencies {
        classpath "com.commercehub.gradle.plugin:gradle-avro-plugin:0.14.2"
    }
}

plugins {
    id 'org.springframework.boot' version '2.5.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id "com.github.davidmc24.gradle.plugin.avro" version '1.2.0'
}



group = 'com.example'
version = '0.0.1-SNAPSHOT'
description = 'weather-app'
java.sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
    maven {
        url = uri('https://packages.confluent.io/maven/')
    }
}

ext {
    set('springCloudVersion', "2020.0.3")
    set('testcontainersVersion', "1.15.3")
}

dependencies {
    implementation 'org.springframework.cloud:spring-cloud-stream'
    implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.cloud:spring-cloud-stream-schema:2.2.1.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation 'org.testcontainers:kafka'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.springframework.cloud:spring-cloud-stream'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.awaitility:awaitility:3.0.0'
//    implementation('io.confluent:kafka-avro-serializer:4.0.0') {
//        exclude group: 'org.slf4j'
//    }
    implementation 'org.apache.avro:avro:1.10.1'
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
}

//def generateAvro = tasks.register("generateAvro", GenerateAvroJavaTask) {
//    source("src/main/resources")
//    outputDir = file("src/main/java/com/example/weatherapp/schema")
//}
//
//tasks.named("compileJava").configure {
//    source(generateAvro)
//}
